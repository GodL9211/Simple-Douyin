// Code generated by hertz generator.

package api

import (
	api "Simple-Douyin/cmd/api/biz/model/api"
	"Simple-Douyin/cmd/api/biz/mw"
	"Simple-Douyin/cmd/api/rpc"
	"Simple-Douyin/kitex_gen/user"
	"Simple-Douyin/pkg/constants"
	"context"

	//"github.com/hertz-contrib/jwt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	_, err = rpc.RegisterUser(context.Background(), &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(constants.IdentityKey)
	u, err := rpc.UserInfo(context.Background(), &user.UserInfoRequest{
		UserId: v.(*api.User).ID,
	})
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api.UserInfoResponse)
	resp.StatusCode = 0
	resp.StatusMsg = "UserInfo Successful"
	resp.User = &api.User{
		ID:            u.Id,
		Name:          u.Name,
		FollowCount:   u.FollowCount,
		FollowerCount: u.FollowerCount,
		IsFollow:      u.IsFollow,
	}

	c.JSON(consts.StatusOK, resp)
}
