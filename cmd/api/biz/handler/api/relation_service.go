// Code generated by hertz generator.

package api

import (
	"context"
	"log"

	api "Simple-Douyin/cmd/api/biz/model/api"
	"Simple-Douyin/cmd/api/rpc"
	"Simple-Douyin/kitex_gen/relation"
	"Simple-Douyin/pkg/constants"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println("[debug] request BindAndValidate error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RelationActionResponse)

	log.Println("[ypx debug] req checked finished, prepare to rpc")

	v, _ := c.Get(constants.IdentityKey)
	err = rpc.RelationAction(context.Background(), &relation.RelationActionRequest{
		UserId:     v.(*api.User).ID,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	}, resp)
	if err != nil {
		log.Println("[debug] rpc RelationAction error", err.Error())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	log.Println("[debug] RelationAction success")
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println("[debug] request BindAndValidate error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// TODO: check token、check ToUserId
	resp := new(api.RelationFollowListResponse)

	v, _ := c.Get(constants.IdentityKey)
	err = rpc.RelationFollowList(context.Background(), &relation.RelationFollowListRequest{
		UserId: v.(*api.User).ID,
	}, resp)
	if err != nil {
		log.Println("[debug] rpc RelationFollowList error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	log.Println("[debug] RelationFollowList success")
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println("[debug] request BindAndValidate error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// TODO: check token、check ToUserId
	resp := new(api.RelationFollowerListResponse)

	v, _ := c.Get(constants.IdentityKey)
	err = rpc.RelationFollowerList(context.Background(), &relation.RelationFollowerListRequest{
		UserId: v.(*api.User).ID,
	}, resp)

	if err != nil {
		log.Println("[debug] rpc RelationFollowerList error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	log.Println("[debug] RelationFollowerList success")
	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println("[debug] request BindAndValidate error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RelationFriendListResponse)

	v, _ := c.Get(constants.IdentityKey)
	err = rpc.RelationFriendList(context.Background(), &relation.RelationFriendListRequest{
		UserId: v.(*api.User).ID,
	}, resp)

	if err != nil {
		log.Println("[debug] rpc RelationFriendList error")
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	log.Println("[debug] RelationFriendList success")
	c.JSON(consts.StatusOK, resp)
}
