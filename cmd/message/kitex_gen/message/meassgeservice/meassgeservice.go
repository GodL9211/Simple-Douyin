// Code generated by Kitex v0.4.4. DO NOT EDIT.

package meassgeservice

import (
	message "Simple-Douyin/cmd/message/kitex_gen/message"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return meassgeServiceServiceInfo
}

var meassgeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MeassgeService"
	handlerType := (*message.MeassgeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageAction": kitex.NewMethodInfo(messageActionHandler, newMeassgeServiceMessageActionArgs, newMeassgeServiceMessageActionResult, false),
		"MessageChat":   kitex.NewMethodInfo(messageChatHandler, newMeassgeServiceMessageChatArgs, newMeassgeServiceMessageChatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MeassgeServiceMessageActionArgs)
	realResult := result.(*message.MeassgeServiceMessageActionResult)
	success, err := handler.(message.MeassgeService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMeassgeServiceMessageActionArgs() interface{} {
	return message.NewMeassgeServiceMessageActionArgs()
}

func newMeassgeServiceMessageActionResult() interface{} {
	return message.NewMeassgeServiceMessageActionResult()
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MeassgeServiceMessageChatArgs)
	realResult := result.(*message.MeassgeServiceMessageChatResult)
	success, err := handler.(message.MeassgeService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMeassgeServiceMessageChatArgs() interface{} {
	return message.NewMeassgeServiceMessageChatArgs()
}

func newMeassgeServiceMessageChatResult() interface{} {
	return message.NewMeassgeServiceMessageChatResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageAction(ctx context.Context, req *message.MessageActionRequest) (r *message.MessageActionResponse, err error) {
	var _args message.MeassgeServiceMessageActionArgs
	_args.Req = req
	var _result message.MeassgeServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, req *message.MessageChatRequest) (r *message.MessageChatResponse, err error) {
	var _args message.MeassgeServiceMessageChatArgs
	_args.Req = req
	var _result message.MeassgeServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
